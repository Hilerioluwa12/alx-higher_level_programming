Importing the function from the module:
    >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Checks: module docstring:
    >>> x = __import__("2-matrix_divided").__doc__
    >>> len(x) > 1
    True

Check: function docstring:
    >>> f = __import__("2-matrix_divided").matrix_divided.__doc__
    >>> len(f) > 1
    True

Check: passing None as matrix:
    >>> matrix_divided(None, 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Check: passing matrix as Boolean:
    >>> matrix_divided(True, 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Check: passing None as div:
    >>> matrix_divided([[2, 4, 8], [1, 2, 3]], None)
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Check: matrix as string:
    >>> matrix_divided("holberton", 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Check: division by zero:
    >>> matrix_divided([[2, 4, 8], [1, 2, 3]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Check: mix of ints and floats:
	>>> matrix = [[1, 2.4, 3], [4.1, 5, 6.8]]
	>>> matrix_divided(matrix, 11)
	[[0.09, 0.22, 0.27], [0.37, 0.45, 0.62]]
	>>> matrix
	[[1, 2.4, 3], [4.1, 5, 6.8]]

Check: div as float:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 4.5)
    [[0.22, 0.44, 0.67], [0.89, 1.11, 1.33]]
    >>> matrix
    [[1, 2, 3], [4, 5, 6]]

Check: negative numerators:
    >>> matrix = [[-1, -2, -3], [-4, -5, -6]]
    >>> matrix_divided(matrix, 3)
    [[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]
    >>> matrix
    [[-1, -2, -3], [-4, -5, -6]]

Check: passing empty matrix more:
    >>> matrix_divided([[], [], []], 2)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

check: division by non number:
    >>> matrix_divided([[2]], "foo")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

Check: missing 1 arg:
    >>> matrix_divided([[2, 4, 8], [1, 2, 3]])
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 1 required positional argument: 'div'

Check: missing 2 arg:
    >>> matrix_divided()
    Traceback (most recent call last):
    ...
    TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Check: division by inf:
    >>> matrix_divided([[2, 4, 8], [1, 2, 3]], float('inf'))
    [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]

Check: matrix with different rows
    >>> matrix_divided([[2, 4, 8], [1, 3]], 2)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

Check: matrix not integer
    >>> matrix_divided([[3, '9', 5], [15, 3, 5]], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

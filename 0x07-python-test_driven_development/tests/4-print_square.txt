importing the function from the module:
    >>> print_square = __import__("4-print_square").print_square

Check: module docstring:
    >>> a = __import__("4-print_square").__doc__
    >>> len(a) > 1
    True

Check: function docstring:
    >>> b = __import__("4-print_square").print_square.__doc__
    >>> len(b) > 1
    True

Check: basic print 1:
    >>> print_square(1)
    #

Check: basic print 2:
    >>> print_square(2)
    ##
    ##

Check: basic print 3:
    >>> print_square(3)
    ###
    ###
    ###
Check: basic print 10:
    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

Check: print negative:
    >>> print_square(-10)
    Traceback (most recent call last):
    ...
    ValueError: size must be >= 0

Check: print float:
    >>> print_square(10.0)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Check: print str:
    >>> print_square("foo")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Check: print none:
    >>> print_square(None)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Check: print inf:
    >>> print_square(float('inf'))
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Check: print nan:
    >>> print_square(float('nan'))
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Check: missing one arg:
    >>> print_square()
    Traceback (most recent call last):
    ...
    TypeError: print_square() missing 1 required positional argument: 'size'
